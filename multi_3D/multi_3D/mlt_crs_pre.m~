%% Processing selection
IF = struct('debug',0, ...
            'DC_blk',0, ...
            'normal',1, ...
            'slow_ramp',0, ...
            'cut_lh_freq',1);

%% File
file_addr = data_addr;

% LPF
LPF_ph = designfilt('lowpassfir', ...
    'PassbandFrequency',0.02,'StopbandFrequency',0.04, ...
    'PassbandRipple',0.1,'StopbandAttenuation',20, ...
    'DesignMethod','equiripple');

Beat_stg = zeros(N_mfreq_spl,N_frm_mov,length(stg_use));

for ks = 1:length(stg_use)
    scan_mode_use = scan_mode;
    if strcmp(scan_mode,'both')
        if ks<=4
            scan_mode_use = 'rect';
        else 
            scan_mode_use = 'cross';
        end
    end
    stg_idx = stg_use(ks);
    
    % Read USRP RX file
    file_ref = sprintf('%s_stg%d',scan_mode_use,stg_idx); % refrence of experiment file name 
    file_USRP = [file_addr,'/',file_ref];
    
    file_name = [file_USRP,'_0.dat']; % I channel file name
    Beat_I = read_complex_binary2(file_name,N_spl,RX_start);      % read I channel file
    file_name = [file_USRP,'_1.dat'];     % Q channel file name 
    Beat_Q = read_complex_binary2(file_name,N_spl,RX_start);  % read Q channel file

    % IQ
    Beat_C = real(Beat_I) - 1j*real(Beat_Q);    % combine I Q channels to get complex signal 
    clear Beat_I Beat_Q;

    file_name = [file_USRP,'_2.dat'];     % Ref channel file name 
    Beat_ref = read_complex_binary2(file_name,N_spl_frm,RX_start);  % read Q channel file
    Beat_ref = real(Beat_ref);
    
    % Align ramp
    align_ramp_idx = sync_ramp_v4(Beat_ref(1:N_spl_frm),0);
    N_frm = floor((N_spl-align_ramp_idx+1)/N_spl_frm);    % update number of frames
    N_spl = N_frm*N_spl_frm;
    Beat_C = Beat_C(align_ramp_idx:(align_ramp_idx+N_spl-1));     % update RX data
    clear Beat_ref;
    
    % Blocking DC
    if IF.DC_blk
        figure();
        subplot(2,1,1);
        plot(real(Beat_C(1:N_spl_frm))); hold on;
        subplot(2,1,2);
        plot(imag(Beat_C(1:N_spl_frm))); hold on;
        dcblker = dsp.DCBlocker;
        Beat_C = dcblker(Beat_C);
        subplot(2,1,1);
        plot(real(Beat_C(1:N_spl_frm)));
        subplot(2,1,2);
        plot(imag(Beat_C(1:N_spl_frm)));
        title('DC block');
    end
    
    % Normalize IQ channels 
    if IF.normal
        Beat_real_norm = mean(norm(real(Beat_C)),2);
        Beat_imag_norm = mean(norm(imag(Beat_C)),2);
        Beat_C = real(Beat_C)+1j*imag(Beat_C)*Beat_real_norm/Beat_imag_norm;
    end
    
    % Reshape Frame
    Beat_C = reshape(Beat_C,N_spl_frm,N_frm);
    
    % Separate fast and slow ramp samples 
    Beat_fst = Beat_C(1:N_spl_fr,:);
    clear Beat_C;
    
    % Cut off low high freq in ramp
    Beat_mfreq = Beat_fst([(N_lfreq_spl+1):(N_spl_fr/2-N_hfreq_spl),(N_spl_fr/2+1+N_hfreq_spl):(N_spl_fr-N_lfreq_spl)],:);
    Beat_mfreq_up = Beat_mfreq(1:N_mfreq_spl,:);
    
    % depth FFT
    N_FFT = N_mfreq_spl;
    FFT_fr = fft(Beat_mfreq_up,N_FFT,1);
    f_axis_fr = linspace(0,(Rs-Rs/N_FFT),N_FFT);    d_axis_fr = f_axis_fr/As1*c/2;
    yax_idx = find((d_axis_fr>int_cbl_len)&(d_axis_fr<(dist_ulim+int_cbl_len)));
    d_axis = d_axis_fr(yax_idx)-int_cbl_len;
    
    FFT_fr_mag = abs(FFT_fr);
    [~,pk_idx] = max(mean(FFT_fr_mag,2));
    
    % select the moving frames according to FFT phase
    mov_start_idx = zeros(1,10);
    
    if IF.debug
        figure(); 
    end
    for kyd = (pk_idx-5):(pk_idx+5)
        FFT_ph = phase(FFT_fr(kyd,:));
        Beat_ph = phase(Beat_mfreq_up(kyd,:));
        FFT_ph_lpf = filtfilt(LPF_ph,FFT_ph);
        Beat_ph_lpf = filtfilt(LPF_ph,Beat_ph);
%         FFT_ph_lpf_drv = diff(FFT_ph_lpf,2);
        if IF.debug 
%             plot(FFT_ph); hold on;   
            subplot(2,1,1);
            plot(FFT_ph_lpf); hold on;
            subplot(2,1,2);
            plot(Beat_ph_lpf); hold on;
    %         plot(FFT_ph_lpf_drv*100); hold on;
        end
        FFT_ph_lpf_avg = mean(FFT_ph_lpf(1:300),2);
        mov_start_idx(kyd) = find(abs(FFT_ph_lpf-FFT_ph_lpf_avg)>abs(FFT_ph_lpf_avg)*0.1,1)-10;
    end
    mov_start_idx = mov_start_idx(find(mov_start_idx>1));
    mov_start_idx = round(median(mov_start_idx));
    
%     mov_start_idx = 469;
    mov_end_idx = mov_start_idx + N_frm_mov -1;
    
    % Comfirming moving frame detection
    if IF.debug
        subplot(2,1,1);
        plot(repmat(mov_start_idx,1,21),-10:10,'r*'); hold on;
        plot(repmat(mov_end_idx,1,21),-10:10,'r*'); hold on;
        subplot(2,1,2);
        plot(repmat(mov_start_idx,1,21),-10:10,'r*'); hold on;
        plot(repmat(mov_end_idx,1,21),-10:10,'r*'); hold on;
    end
%     FFT_fr = FFT_fr(mov_start_idx:mov_end_idx,:);
    Beat_mfreq_up = Beat_mfreq_up(:,mov_start_idx:mov_end_idx);
    Beat_stg(:,:,ks) = Beat_mfreq_up;
end

clear Beat_fst Beat_mfreq Beat_mfreq_up Beat_ph Beat_ph_lpf FFT_fr FFT_fr_mag FFT_ph FFT_ph_lpf;
clear LPF_ph;